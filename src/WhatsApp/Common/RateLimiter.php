<?php
namespace WhatsApp\Common; use WhatsApp\Constants; use WhatsApp\Common\ApiErrors; use WhatsApp\Common\ApiError; use WhatsApp\Common\Util; use Symfony\Component\HttpFoundation\Request; use Symfony\Component\HttpFoundation\Response; use Silex\Application; use \Touhonoob\RateLimit\RateLimit; use \Touhonoob\RateLimit\Adapter\APCu as RateLimitAdapterAPCu; class RateLimiter { public static function increase( string $name, int $maxRequests, int $period, string $id ) { $adapter = new RateLimitAdapterAPCu(); $rateLimit = new RateLimit($name, $maxRequests, $period, $adapter); return $rateLimit->check($id); } public static function check( string $name, int $maxRequests, int $period, string $id ) { $adapter = new RateLimitAdapterAPCu(); $rateLimit = new RateLimit($name, $maxRequests, $period, $adapter); return $rateLimit->getAllow($id); } public static function onUnauthorizedResponse( Request $request, Response $response, Application $app ) { $clientIP = $request->getClientIp(); $errors = new ApiErrors(); if ($request->getPathInfo() === '/v1/users/login') { if (self::increase("unauthorizedLogin", Constants::RL_MAX_WRONG_LOGINS[0], Constants::RL_MAX_WRONG_LOGINS[1], $clientIP) <= 0) { $app['monolog']->info("Rate limiting exceeded on bad login attempts: " . $clientIP); $errors->add(ApiError::TOO_MANY_REQUESTS, "Rate limiting exceeded on bad login attempts"); $response->setStatusCode(Response::HTTP_TOO_MANY_REQUESTS); $resp = Util::genResponse(null, new \Stdclass, $errors, $app); $response->setContent(json_encode($resp)); } } } } 
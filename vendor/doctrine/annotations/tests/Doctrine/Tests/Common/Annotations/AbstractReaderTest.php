<?php
 namespace Doctrine\Tests\Common\Annotations; use Doctrine\Common\Annotations\Annotation; use Doctrine\Common\Annotations\AnnotationException; use ReflectionClass, Doctrine\Common\Annotations\AnnotationReader; require_once __DIR__ . '/TopLevelAnnotation.php'; abstract class AbstractReaderTest extends \PHPUnit_Framework_TestCase { public function getReflectionClass() { return new ReflectionClass(DummyClass::class); } public function testAnnotations() { $class = $this->getReflectionClass(); $reader = $this->getReader(); self::assertCount(1, $reader->getClassAnnotations($class)); self::assertInstanceOf($annotName = DummyAnnotation::class, $annot = $reader->getClassAnnotation($class, $annotName)); self::assertEquals('hello', $annot->dummyValue); $field1Prop = $class->getProperty('field1'); $propAnnots = $reader->getPropertyAnnotations($field1Prop); self::assertCount(1, $propAnnots); self::assertInstanceOf($annotName, $annot = $reader->getPropertyAnnotation($field1Prop, $annotName)); self::assertEquals('fieldHello', $annot->dummyValue); $getField1Method = $class->getMethod('getField1'); $methodAnnots = $reader->getMethodAnnotations($getField1Method); self::assertCount(1, $methodAnnots); self::assertInstanceOf($annotName, $annot = $reader->getMethodAnnotation($getField1Method, $annotName)); self::assertEquals(array(1, 2, 'three'), $annot->value); $field2Prop = $class->getProperty('field2'); $propAnnots = $reader->getPropertyAnnotations($field2Prop); self::assertCount(1, $propAnnots); self::assertInstanceOf($annotName = DummyJoinTable::class, $joinTableAnnot = $reader->getPropertyAnnotation($field2Prop, $annotName)); self::assertCount(1, $joinTableAnnot->joinColumns); self::assertCount(1, $joinTableAnnot->inverseJoinColumns); self::assertInstanceOf(DummyJoinColumn::class, $joinTableAnnot->joinColumns[0]); self::assertInstanceOf(DummyJoinColumn::class, $joinTableAnnot->inverseJoinColumns[0]); self::assertEquals('col1', $joinTableAnnot->joinColumns[0]->name); self::assertEquals('col2', $joinTableAnnot->joinColumns[0]->referencedColumnName); self::assertEquals('col3', $joinTableAnnot->inverseJoinColumns[0]->name); self::assertEquals('col4', $joinTableAnnot->inverseJoinColumns[0]->referencedColumnName); $dummyAnnot = $reader->getMethodAnnotation($class->getMethod('getField1'), DummyAnnotation::class); self::assertEquals('', $dummyAnnot->dummyValue); self::assertEquals(array(1, 2, 'three'), $dummyAnnot->value); $dummyAnnot = $reader->getMethodAnnotation($class->getMethod('getField3'), DummyAnnotation::class); self::assertEquals('\d{4}-[01]\d-[0-3]\d [0-2]\d:[0-5]\d:[0-5]\d', $dummyAnnot->value); $dummyAnnot = $reader->getPropertyAnnotation($class->getProperty('field1'), DummyAnnotation::class); self::assertEquals('fieldHello', $dummyAnnot->dummyValue); $classAnnot = $reader->getClassAnnotation($class, DummyAnnotation::class); self::assertEquals('hello', $classAnnot->dummyValue); } public function testAnnotationsWithValidTargets() { $reader = $this->getReader(); $class = new ReflectionClass(Fixtures\ClassWithValidAnnotationTarget::class); self::assertCount(1, $reader->getClassAnnotations($class)); self::assertCount(1, $reader->getPropertyAnnotations($class->getProperty('foo'))); self::assertCount(1, $reader->getMethodAnnotations($class->getMethod('someFunction'))); self::assertCount(1, $reader->getPropertyAnnotations($class->getProperty('nested'))); } public function testAnnotationsWithVarType() { $reader = $this->getReader(); $class = new ReflectionClass(Fixtures\ClassWithAnnotationWithVarType::class); self::assertCount(1, $fooAnnot = $reader->getPropertyAnnotations($class->getProperty('foo'))); self::assertCount(1, $barAnnot = $reader->getMethodAnnotations($class->getMethod('bar'))); self::assertInternalType('string', $fooAnnot[0]->string); self::assertInstanceOf(Fixtures\AnnotationTargetAll::class, $barAnnot[0]->annotation); } public function testAtInDescription() { $reader = $this->getReader(); $class = new ReflectionClass(Fixtures\ClassWithAtInDescriptionAndAnnotation::class); self::assertCount(1, $fooAnnot = $reader->getPropertyAnnotations($class->getProperty('foo'))); self::assertCount(1, $barAnnot = $reader->getPropertyAnnotations($class->getProperty('bar'))); self::assertInstanceOf(Fixtures\AnnotationTargetPropertyMethod::class, $fooAnnot[0]); self::assertInstanceOf(Fixtures\AnnotationTargetPropertyMethod::class, $barAnnot[0]); } public function testClassWithWithDanglingComma() { $reader = $this->getReader(); $annots = $reader->getClassAnnotations(new \ReflectionClass(DummyClassWithDanglingComma::class)); self::assertCount(1, $annots); } public function testClassWithInvalidAnnotationTargetAtClassDocBlock() { $reader = $this->getReader(); $reader->getClassAnnotations(new \ReflectionClass(Fixtures\ClassWithInvalidAnnotationTargetAtClass::class)); } public function testClassWithWithInclude() { $reader = $this->getReader(); $annots = $reader->getClassAnnotations(new \ReflectionClass(Fixtures\ClassWithRequire::class)); self::assertCount(1, $annots); } public function testClassWithInvalidAnnotationTargetAtPropertyDocBlock() { $reader = $this->getReader(); $reader->getPropertyAnnotations(new \ReflectionProperty(Fixtures\ClassWithInvalidAnnotationTargetAtProperty::class, 'foo')); } public function testClassWithInvalidNestedAnnotationTargetAtPropertyDocBlock() { $reader = $this->getReader(); $reader->getPropertyAnnotations(new \ReflectionProperty(Fixtures\ClassWithInvalidAnnotationTargetAtProperty::class, 'bar')); } public function testClassWithInvalidAnnotationTargetAtMethodDocBlock() { $reader = $this->getReader(); $reader->getMethodAnnotations(new \ReflectionMethod(Fixtures\ClassWithInvalidAnnotationTargetAtMethod::class, 'functionName')); } public function testClassWithAnnotationWithTargetSyntaxErrorAtClassDocBlock() { $reader = $this->getReader(); $reader->getClassAnnotations(new \ReflectionClass(Fixtures\ClassWithAnnotationWithTargetSyntaxError::class)); } public function testClassWithAnnotationWithTargetSyntaxErrorAtPropertyDocBlock() { $reader = $this->getReader(); $reader->getPropertyAnnotations(new \ReflectionProperty(Fixtures\ClassWithAnnotationWithTargetSyntaxError::class,'foo')); } public function testClassWithAnnotationWithTargetSyntaxErrorAtMethodDocBlock() { $reader = $this->getReader(); $reader->getMethodAnnotations(new \ReflectionMethod(Fixtures\ClassWithAnnotationWithTargetSyntaxError::class,'bar')); } public function testClassWithPropertyInvalidVarTypeError() { $reader = $this->getReader(); $class = new ReflectionClass(Fixtures\ClassWithAnnotationWithVarType::class); $reader->getPropertyAnnotations($class->getProperty('invalidProperty')); } public function testClassWithMethodInvalidVarTypeError() { $reader = $this->getReader(); $class = new ReflectionClass(Fixtures\ClassWithAnnotationWithVarType::class); $reader->getMethodAnnotations($class->getMethod('invalidMethod')); } public function testClassSyntaxErrorContext() { $reader = $this->getReader(); $reader->getClassAnnotations(new \ReflectionClass(DummyClassSyntaxError::class)); } public function testMethodSyntaxErrorContext() { $reader = $this->getReader(); $reader->getMethodAnnotations(new \ReflectionMethod(DummyClassMethodSyntaxError::class, 'foo')); } public function testPropertySyntaxErrorContext() { $reader = $this->getReader(); $reader->getPropertyAnnotations(new \ReflectionProperty(DummyClassPropertySyntaxError::class, 'foo')); } public function testMultipleAnnotationsOnSameLine() { $reader = $this->getReader(); $annots = $reader->getPropertyAnnotations(new \ReflectionProperty(DummyClass2::class, 'id')); self::assertCount(3, $annots); } public function testNonAnnotationProblem() { $reader = $this->getReader(); self::assertNotNull($annot = $reader->getPropertyAnnotation(new \ReflectionProperty(DummyClassNonAnnotationProblem::class, 'foo'), $name = DummyAnnotation::class)); self::assertInstanceOf($name, $annot); } public function testIncludeIgnoreAnnotation() { $reader = $this->getReader(); $reader->getPropertyAnnotations(new \ReflectionProperty(Fixtures\ClassWithIgnoreAnnotation::class, 'foo')); self::assertFalse(class_exists(Fixtures\IgnoreAnnotationClass::class, false)); } public function testImportWithConcreteAnnotation() { $reader = $this->getReader(); $property = new \ReflectionProperty(TestImportWithConcreteAnnotation::class, 'field'); $annotations = $reader->getPropertyAnnotations($property); self::assertCount(1, $annotations); self::assertNotNull($reader->getPropertyAnnotation($property, DummyAnnotation::class)); } public function testImportWithInheritance() { $reader = $this->getReader(); $class = new TestParentClass(); $ref = new \ReflectionClass($class); $childAnnotations = $reader->getPropertyAnnotations($ref->getProperty('child')); self::assertCount(1, $childAnnotations); self::assertInstanceOf(Foo\Name::class, reset($childAnnotations)); $parentAnnotations = $reader->getPropertyAnnotations($ref->getProperty('parent')); self::assertCount(1, $parentAnnotations); self::assertInstanceOf(Bar\Name::class, reset($parentAnnotations)); } public function testImportDetectsNotImportedAnnotation() { $reader = $this->getReader(); $reader->getPropertyAnnotations(new \ReflectionProperty(TestAnnotationNotImportedClass::class, 'field')); } public function testImportDetectsNonExistentAnnotation() { $reader = $this->getReader(); $reader->getPropertyAnnotations(new \ReflectionProperty(TestNonExistentAnnotationClass::class, 'field')); } public function testTopLevelAnnotation() { $reader = $this->getReader(); $annotations = $reader->getPropertyAnnotations(new \ReflectionProperty(TestTopLevelAnnotationClass::class, 'field')); self::assertCount(1, $annotations); self::assertInstanceOf(\TopLevelAnnotation::class, reset($annotations)); } public function testIgnoresAnnotationsNotPrefixedWithWhitespace() { $reader = $this->getReader(); $annotation = $reader->getClassAnnotation(new \ReflectionClass(new TestIgnoresNonAnnotationsClass()), Name::class); self::assertInstanceOf(Name::class, $annotation); } private static $testResetsPhpParserAfterUseRun = false; public function testResetsPhpParserAfterUse() { self::assertFalse(!self::$testResetsPhpParserAfterUseRun && class_exists(\Doctrine_Tests_Common_Annotations_Fixtures_ClassNoNamespaceNoComment::class), 'Test invalid if class has already been compiled'); self::$testResetsPhpParserAfterUseRun = true; $reader = $this->getReader(); $class = new ReflectionClass(Fixtures\ClassWithValidAnnotationTarget::class); $reader->getClassAnnotations($class); $class = new ReflectionClass(Fixtures\ClassWithClassAnnotationOnly::class); $annotations = $reader->getClassAnnotations($class); require_once __DIR__ . '/Fixtures/ClassNoNamespaceNoComment.php'; self::assertNotEmpty($annotations); $annotations = $reader->getClassAnnotations(new \ReflectionClass(new \Doctrine_Tests_Common_Annotations_Fixtures_ClassNoNamespaceNoComment())); self::assertEmpty($annotations); } public function testErrorWhenInvalidAnnotationIsUsed() { $reader = $this->getReader(); $ref = new \ReflectionClass(Fixtures\InvalidAnnotationUsageClass::class); $reader->getClassAnnotations($ref); } public function testInvalidAnnotationUsageButIgnoredClass() { $reader = $this->getReader(); $ref = new \ReflectionClass(Fixtures\InvalidAnnotationUsageButIgnoredClass::class); $annots = $reader->getClassAnnotations($ref); self::assertCount(2, $annots); } public function testInvalidAnnotationButIgnored() { $reader = $this->getReader(); $class = new \ReflectionClass(Fixtures\ClassDDC1660::class); self::assertTrue(class_exists(Fixtures\Annotation\Version::class)); self::assertEmpty($reader->getClassAnnotations($class)); self::assertEmpty($reader->getMethodAnnotations($class->getMethod('bar'))); self::assertEmpty($reader->getPropertyAnnotations($class->getProperty('foo'))); } public function testAnnotationEnumeratorException() { $reader = $this->getReader(); $class = new \ReflectionClass(Fixtures\ClassWithAnnotationEnum::class); self::assertCount(1, $bar = $reader->getMethodAnnotations($class->getMethod('bar'))); self::assertCount(1, $foo = $reader->getPropertyAnnotations($class->getProperty('foo'))); self::assertInstanceOf(Fixtures\AnnotationEnum::class, $bar[0]); self::assertInstanceOf(Fixtures\AnnotationEnum::class, $foo[0]); try { $reader->getPropertyAnnotations($class->getProperty('invalidProperty')); $this->fail(); } catch (AnnotationException $exc) { self::assertEquals('[Enum Error] Attribute "value" of @Doctrine\Tests\Common\Annotations\Fixtures\AnnotationEnum declared on property Doctrine\Tests\Common\Annotations\Fixtures\ClassWithAnnotationEnum::$invalidProperty accept only [ONE, TWO, THREE], but got FOUR.', $exc->getMessage()); } try { $reader->getMethodAnnotations($class->getMethod('invalidMethod')); $this->fail(); } catch (AnnotationException $exc) { self::assertEquals('[Enum Error] Attribute "value" of @Doctrine\Tests\Common\Annotations\Fixtures\AnnotationEnum declared on method Doctrine\Tests\Common\Annotations\Fixtures\ClassWithAnnotationEnum::invalidMethod() accept only [ONE, TWO, THREE], but got 5.', $exc->getMessage()); } } public function testIgnoreFixMeAndUpperCaseToDo() { $reader = $this->getReader(); $ref = new \ReflectionClass(DCOM106::class); $reader->getClassAnnotations($ref); } abstract protected function getReader(); } class TestParseAnnotationClass { private $field; } class TestIgnoresNonAnnotationsClass { } class TestTopLevelAnnotationClass { private $field; } class TestNonExistentAnnotationClass { private $field; } class TestAnnotationNotImportedClass { private $field; } class TestChildClass { protected $child; } class TestParentClass extends TestChildClass { private $parent; } class TestImportWithConcreteAnnotation { private $field; } class DummyClass2 { private $id; } class DummyId extends Annotation {} class DummyColumn extends Annotation { public $type; } class DummyGeneratedValue extends Annotation {} class DummyAnnotation extends Annotation { public $dummyValue; } class DummyAnnotationWithIgnoredAnnotation extends Annotation { public $dummyValue; } class DummyJoinColumn extends Annotation { public $name; public $referencedColumnName; } class DummyJoinTable extends Annotation { public $name; public $joinColumns; public $inverseJoinColumns; } class DummyClassWithDanglingComma { } class DummyClassSyntaxError { } class DummyClassMethodSyntaxError { public function foo() { } } class DummyClassPropertySyntaxError { public $foo; } class DummyClassNonAnnotationProblem { public $foo; } class DummyClassWithEmail { } class DCOM106 { } namespace Doctrine\Tests\Common\Annotations\Foo; use Doctrine\Common\Annotations\Annotation; class Name extends Annotation { public $name; } namespace Doctrine\Tests\Common\Annotations\Bar; use Doctrine\Common\Annotations\Annotation; class Name extends Annotation { public $name; } 
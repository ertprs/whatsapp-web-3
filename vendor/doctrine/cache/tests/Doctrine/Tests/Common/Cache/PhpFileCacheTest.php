<?php
 namespace Doctrine\Tests\Common\Cache; use Doctrine\Common\Cache\Cache; use Doctrine\Common\Cache\PhpFileCache; class PhpFileCacheTest extends BaseFileCacheTest { public function provideDataToCache() { $data = parent::provideDataToCache(); unset($data['object'], $data['object_recursive']); if (PHP_VERSION_ID < 70002) { unset($data['float_zero']); } return $data; } public function testImplementsSetState() { $cache = $this->_getCacheDriver(); $cache->save('test_set_state', new SetStateClass(array(1,2,3))); $this->assertCount(0, SetStateClass::$values); $value = $cache->fetch('test_set_state'); $this->assertInstanceOf('Doctrine\Tests\Common\Cache\SetStateClass', $value); $this->assertEquals(array(1,2,3), $value->getValue()); $this->assertCount(1, SetStateClass::$values); $this->assertTrue($cache->contains('test_set_state')); } public function testNotImplementsSetState() { $cache = $this->_getCacheDriver(); $this->setExpectedException('InvalidArgumentException'); $cache->save('test_not_set_state', new NotSetStateClass(array(1,2,3))); } public function testGetStats() { $cache = $this->_getCacheDriver(); $stats = $cache->getStats(); $this->assertNull($stats[Cache::STATS_HITS]); $this->assertNull($stats[Cache::STATS_MISSES]); $this->assertNull($stats[Cache::STATS_UPTIME]); $this->assertEquals(0, $stats[Cache::STATS_MEMORY_USAGE]); $this->assertGreaterThan(0, $stats[Cache::STATS_MEMORY_AVAILABLE]); } protected function _getCacheDriver() { return new PhpFileCache($this->directory); } } class NotSetStateClass { private $value; public function __construct($value) { $this->value = $value; } public function getValue() { return $this->value; } } class SetStateClass extends NotSetStateClass { public static $values = array(); public static function __set_state($data) { self::$values = $data; return new self($data['value']); } } 
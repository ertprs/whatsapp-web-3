<?php
 namespace Doctrine\Tests\Common\Proxy; use ReflectionClass; use Doctrine\Common\Persistence\Mapping\ClassMetadata; class LazyLoadableObjectWithTypehintsClassMetadata implements ClassMetadata { protected $reflectionClass; protected $identifier = [ 'identifierFieldNoReturnTypehint' => true, 'identifierFieldReturnTypehintScalar' => true, 'identifierFieldReturnClassFullyQualified' => true, 'identifierFieldReturnClassPartialUse' => true, 'identifierFieldReturnClassFullUse' => true, 'identifierFieldReturnClassOneWord' => true, 'identifierFieldReturnClassOneLetter' => true, ]; protected $fields = [ 'identifierFieldNoReturnTypehint' => true, 'identifierFieldReturnTypehintScalar' => true, 'identifierFieldReturnClassFullyQualified' => true, 'identifierFieldReturnClassPartialUse' => true, 'identifierFieldReturnClassFullUse' => true, 'identifierFieldReturnClassOneWord' => true, 'identifierFieldReturnClassOneLetter' => true, ]; public function getName() { return $this->getReflectionClass()->getName(); } public function getIdentifier() { return array_keys($this->identifier); } public function getReflectionClass() { if (null === $this->reflectionClass) { $this->reflectionClass = new \ReflectionClass(__NAMESPACE__ . '\LazyLoadableObjectWithTypehints'); } return $this->reflectionClass; } public function isIdentifier($fieldName) { return isset($this->identifier[$fieldName]); } public function hasField($fieldName) { return isset($this->fields[$fieldName]); } public function hasAssociation($fieldName) { return false; } public function isSingleValuedAssociation($fieldName) { throw new \BadMethodCallException('not implemented'); } public function isCollectionValuedAssociation($fieldName) { throw new \BadMethodCallException('not implemented'); } public function getFieldNames() { return array_keys($this->fields); } public function getIdentifierFieldNames() { return $this->getIdentifier(); } public function getAssociationNames() { return []; } public function getTypeOfField($fieldName) { return 'string'; } public function getAssociationTargetClass($assocName) { throw new \BadMethodCallException('not implemented'); } public function isAssociationInverseSide($assocName) { throw new \BadMethodCallException('not implemented'); } public function getAssociationMappedByTargetField($assocName) { throw new \BadMethodCallException('not implemented'); } public function getIdentifierValues($object) { throw new \BadMethodCallException('not implemented'); } } 
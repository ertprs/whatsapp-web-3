<?php
 namespace Doctrine\Tests\Common\Proxy; use ReflectionClass; use Doctrine\Common\Persistence\Mapping\ClassMetadata; class LazyLoadableObjectWithVoidClassMetadata implements ClassMetadata { protected $reflectionClass; public function getName() { return $this->getReflectionClass()->getName(); } public function getIdentifier() { return []; } public function getReflectionClass() { if (null === $this->reflectionClass) { $this->reflectionClass = new \ReflectionClass(__NAMESPACE__ . '\LazyLoadableObjectWithVoid'); } return $this->reflectionClass; } public function isIdentifier($fieldName) { return false; } public function hasField($fieldName) { return false; } public function hasAssociation($fieldName) { return false; } public function isSingleValuedAssociation($fieldName) { throw new \BadMethodCallException('not implemented'); } public function isCollectionValuedAssociation($fieldName) { throw new \BadMethodCallException('not implemented'); } public function getFieldNames() { return []; } public function getIdentifierFieldNames() { return $this->getIdentifier(); } public function getAssociationNames() { return []; } public function getTypeOfField($fieldName) { return 'integer'; } public function getAssociationTargetClass($assocName) { throw new \BadMethodCallException('not implemented'); } public function isAssociationInverseSide($assocName) { throw new \BadMethodCallException('not implemented'); } public function getAssociationMappedByTargetField($assocName) { throw new \BadMethodCallException('not implemented'); } public function getIdentifierValues($object) { throw new \BadMethodCallException('not implemented'); } } 
<?php
 namespace Doctrine\DBAL\Driver\IBMDB2; use Doctrine\DBAL\Driver\Connection; use Doctrine\DBAL\Driver\ServerInfoAwareConnection; class DB2Connection implements Connection, ServerInfoAwareConnection { private $_conn = null; public function __construct(array $params, $username, $password, $driverOptions = array()) { $isPersistant = (isset($params['persistent']) && $params['persistent'] == true); if ($isPersistant) { $this->_conn = db2_pconnect($params['dbname'], $username, $password, $driverOptions); } else { $this->_conn = db2_connect($params['dbname'], $username, $password, $driverOptions); } if ( ! $this->_conn) { throw new DB2Exception(db2_conn_errormsg()); } } public function getServerVersion() { $serverInfo = db2_server_info($this->_conn); return $serverInfo->DBMS_VER; } public function requiresQueryForServerVersion() { return false; } public function prepare($sql) { $stmt = @db2_prepare($this->_conn, $sql); if ( ! $stmt) { throw new DB2Exception(db2_stmt_errormsg()); } return new DB2Statement($stmt); } public function query() { $args = func_get_args(); $sql = $args[0]; $stmt = $this->prepare($sql); $stmt->execute(); return $stmt; } public function quote($input, $type=\PDO::PARAM_STR) { $input = db2_escape_string($input); if ($type == \PDO::PARAM_INT) { return $input; } else { return "'".$input."'"; } } public function exec($statement) { $stmt = $this->prepare($statement); $stmt->execute(); return $stmt->rowCount(); } public function lastInsertId($name = null) { return db2_last_insert_id($this->_conn); } public function beginTransaction() { db2_autocommit($this->_conn, DB2_AUTOCOMMIT_OFF); } public function commit() { if (!db2_commit($this->_conn)) { throw new DB2Exception(db2_conn_errormsg($this->_conn)); } db2_autocommit($this->_conn, DB2_AUTOCOMMIT_ON); } public function rollBack() { if (!db2_rollback($this->_conn)) { throw new DB2Exception(db2_conn_errormsg($this->_conn)); } db2_autocommit($this->_conn, DB2_AUTOCOMMIT_ON); } public function errorCode() { return db2_conn_error($this->_conn); } public function errorInfo() { return array( 0 => db2_conn_errormsg($this->_conn), 1 => $this->errorCode(), ); } } 
<?php
 namespace Doctrine\DBAL\Driver\OCI8; use PDO; use IteratorAggregate; use Doctrine\DBAL\Driver\Statement; class OCI8Statement implements \IteratorAggregate, Statement { protected $_dbh; protected $_sth; protected $_conn; protected static $_PARAM = ':param'; protected static $fetchModeMap = array( PDO::FETCH_BOTH => OCI_BOTH, PDO::FETCH_ASSOC => OCI_ASSOC, PDO::FETCH_NUM => OCI_NUM, PDO::FETCH_COLUMN => OCI_NUM, ); protected $_defaultFetchMode = PDO::FETCH_BOTH; protected $_paramMap = array(); private $boundValues = array(); private $result = false; public function __construct($dbh, $statement, OCI8Connection $conn) { list($statement, $paramMap) = self::convertPositionalToNamedPlaceholders($statement); $this->_sth = oci_parse($dbh, $statement); $this->_dbh = $dbh; $this->_paramMap = $paramMap; $this->_conn = $conn; } static public function convertPositionalToNamedPlaceholders($statement) { $count = 1; $inLiteral = false; $stmtLen = strlen($statement); $paramMap = array(); for ($i = 0; $i < $stmtLen; $i++) { if ($statement[$i] == '?' && !$inLiteral) { $paramMap[$count] = ":param$count"; $len = strlen($paramMap[$count]); $statement = substr_replace($statement, ":param$count", $i, 1); $i += $len-1; $stmtLen = strlen($statement); ++$count; } elseif ($statement[$i] == "'" || $statement[$i] == '"') { $inLiteral = ! $inLiteral; } } return array($statement, $paramMap); } public function bindValue($param, $value, $type = null) { return $this->bindParam($param, $value, $type, null); } public function bindParam($column, &$variable, $type = null, $length = null) { $column = isset($this->_paramMap[$column]) ? $this->_paramMap[$column] : $column; if ($type == \PDO::PARAM_LOB) { $lob = oci_new_descriptor($this->_dbh, OCI_D_LOB); $lob->writeTemporary($variable, OCI_TEMP_BLOB); $this->boundValues[$column] =& $lob; return oci_bind_by_name($this->_sth, $column, $lob, -1, OCI_B_BLOB); } elseif ($length !== null) { $this->boundValues[$column] =& $variable; return oci_bind_by_name($this->_sth, $column, $variable, $length); } $this->boundValues[$column] =& $variable; return oci_bind_by_name($this->_sth, $column, $variable); } public function closeCursor() { if (!$this->result) { return true; } oci_cancel($this->_sth); $this->result = false; return true; } public function columnCount() { return oci_num_fields($this->_sth); } public function errorCode() { $error = oci_error($this->_sth); if ($error !== false) { $error = $error['code']; } return $error; } public function errorInfo() { return oci_error($this->_sth); } public function execute($params = null) { if ($params) { $hasZeroIndex = array_key_exists(0, $params); foreach ($params as $key => $val) { if ($hasZeroIndex && is_numeric($key)) { $this->bindValue($key + 1, $val); } else { $this->bindValue($key, $val); } } } $ret = @oci_execute($this->_sth, $this->_conn->getExecuteMode()); if ( ! $ret) { throw OCI8Exception::fromErrorInfo($this->errorInfo()); } $this->result = true; return $ret; } public function setFetchMode($fetchMode, $arg2 = null, $arg3 = null) { $this->_defaultFetchMode = $fetchMode; return true; } public function getIterator() { $data = $this->fetchAll(); return new \ArrayIterator($data); } public function fetch($fetchMode = null) { if (!$this->result) { return false; } $fetchMode = $fetchMode ?: $this->_defaultFetchMode; if ( ! isset(self::$fetchModeMap[$fetchMode])) { throw new \InvalidArgumentException("Invalid fetch style: " . $fetchMode); } return oci_fetch_array($this->_sth, self::$fetchModeMap[$fetchMode] | OCI_RETURN_NULLS | OCI_RETURN_LOBS); } public function fetchAll($fetchMode = null) { $fetchMode = $fetchMode ?: $this->_defaultFetchMode; if ( ! isset(self::$fetchModeMap[$fetchMode])) { throw new \InvalidArgumentException("Invalid fetch style: " . $fetchMode); } $result = array(); if (self::$fetchModeMap[$fetchMode] === OCI_BOTH) { while ($row = $this->fetch($fetchMode)) { $result[] = $row; } } else { $fetchStructure = OCI_FETCHSTATEMENT_BY_ROW; if ($fetchMode == PDO::FETCH_COLUMN) { $fetchStructure = OCI_FETCHSTATEMENT_BY_COLUMN; } if (!$this->result) { return array(); } oci_fetch_all($this->_sth, $result, 0, -1, self::$fetchModeMap[$fetchMode] | OCI_RETURN_NULLS | $fetchStructure | OCI_RETURN_LOBS); if ($fetchMode == PDO::FETCH_COLUMN) { $result = $result[0]; } } return $result; } public function fetchColumn($columnIndex = 0) { if (!$this->result) { return false; } $row = oci_fetch_array($this->_sth, OCI_NUM | OCI_RETURN_NULLS | OCI_RETURN_LOBS); if (false === $row) { return false; } return isset($row[$columnIndex]) ? $row[$columnIndex] : null; } public function rowCount() { return oci_num_rows($this->_sth); } } 
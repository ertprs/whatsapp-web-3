<?php
 namespace Doctrine\DBAL\Driver\PDOPgSql; use Doctrine\DBAL\Driver\AbstractPostgreSQLDriver; use Doctrine\DBAL\Driver\PDOConnection; use Doctrine\DBAL\DBALException; use PDOException; use PDO; class Driver extends AbstractPostgreSQLDriver { public function connect(array $params, $username = null, $password = null, array $driverOptions = array()) { try { $pdo = new PDOConnection( $this->_constructPdoDsn($params), $username, $password, $driverOptions ); if (defined('PDO::PGSQL_ATTR_DISABLE_PREPARES') && (! isset($driverOptions[PDO::PGSQL_ATTR_DISABLE_PREPARES]) || true === $driverOptions[PDO::PGSQL_ATTR_DISABLE_PREPARES] ) ) { $pdo->setAttribute(PDO::PGSQL_ATTR_DISABLE_PREPARES, true); } if (isset($params['charset'])) { $pdo->query('SET NAMES \''.$params['charset'].'\''); } return $pdo; } catch (PDOException $e) { throw DBALException::driverException($this, $e); } } private function _constructPdoDsn(array $params) { $dsn = 'pgsql:'; if (isset($params['host']) && $params['host'] != '') { $dsn .= 'host=' . $params['host'] . ' '; } if (isset($params['port']) && $params['port'] != '') { $dsn .= 'port=' . $params['port'] . ' '; } if (isset($params['dbname'])) { $dsn .= 'dbname=' . $params['dbname'] . ' '; } else { $dsn .= 'dbname=postgres' . ' '; } if (isset($params['sslmode'])) { $dsn .= 'sslmode=' . $params['sslmode'] . ' '; } return $dsn; } public function getName() { return 'pdo_pgsql'; } } 
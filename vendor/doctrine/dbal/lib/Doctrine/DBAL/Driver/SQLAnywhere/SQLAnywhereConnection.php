<?php
 namespace Doctrine\DBAL\Driver\SQLAnywhere; use Doctrine\DBAL\Driver\Connection; use Doctrine\DBAL\Driver\ServerInfoAwareConnection; class SQLAnywhereConnection implements Connection, ServerInfoAwareConnection { private $connection; public function __construct($dsn, $persistent = false) { $this->connection = $persistent ? @sasql_pconnect($dsn) : @sasql_connect($dsn); if ( ! is_resource($this->connection)) { throw SQLAnywhereException::fromSQLAnywhereError(); } if ( ! sasql_set_option($this->connection, 'verbose_errors', false)) { throw SQLAnywhereException::fromSQLAnywhereError($this->connection); } if ( ! sasql_set_option($this->connection, 'auto_commit', 'on')) { throw SQLAnywhereException::fromSQLAnywhereError($this->connection); } if ( ! sasql_set_option($this->connection, 'row_counts', true)) { throw SQLAnywhereException::fromSQLAnywhereError($this->connection); } } public function beginTransaction() { if ( ! sasql_set_option($this->connection, 'auto_commit', 'off')) { throw SQLAnywhereException::fromSQLAnywhereError($this->connection); } return true; } public function commit() { if ( ! sasql_commit($this->connection)) { throw SQLAnywhereException::fromSQLAnywhereError($this->connection); } $this->endTransaction(); return true; } public function errorCode() { return sasql_errorcode($this->connection); } public function errorInfo() { return sasql_error($this->connection); } public function exec($statement) { $stmt = $this->prepare($statement); $stmt->execute(); return $stmt->rowCount(); } public function getServerVersion() { return $this->query("SELECT PROPERTY('ProductVersion')")->fetchColumn(); } public function lastInsertId($name = null) { if (null === $name) { return sasql_insert_id($this->connection); } return $this->query('SELECT ' . $name . '.CURRVAL')->fetchColumn(); } public function prepare($prepareString) { return new SQLAnywhereStatement($this->connection, $prepareString); } public function query() { $args = func_get_args(); $stmt = $this->prepare($args[0]); $stmt->execute(); return $stmt; } public function quote($input, $type = \PDO::PARAM_STR) { if (is_int($input) || is_float($input)) { return $input; } return "'" . sasql_escape_string($this->connection, $input) . "'"; } public function requiresQueryForServerVersion() { return true; } public function rollBack() { if ( ! sasql_rollback($this->connection)) { throw SQLAnywhereException::fromSQLAnywhereError($this->connection); } $this->endTransaction(); return true; } private function endTransaction() { if ( ! sasql_set_option($this->connection, 'auto_commit', 'on')) { throw SQLAnywhereException::fromSQLAnywhereError($this->connection); } return true; } } 
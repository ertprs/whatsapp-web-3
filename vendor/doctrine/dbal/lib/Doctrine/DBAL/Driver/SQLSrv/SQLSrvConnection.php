<?php
 namespace Doctrine\DBAL\Driver\SQLSrv; use Doctrine\DBAL\Driver\Connection; use Doctrine\DBAL\Driver\ServerInfoAwareConnection; class SQLSrvConnection implements Connection, ServerInfoAwareConnection { protected $conn; protected $lastInsertId; public function __construct($serverName, $connectionOptions) { if ( ! sqlsrv_configure('WarningsReturnAsErrors', 0)) { throw SQLSrvException::fromSqlSrvErrors(); } $this->conn = sqlsrv_connect($serverName, $connectionOptions); if ( ! $this->conn) { throw SQLSrvException::fromSqlSrvErrors(); } $this->lastInsertId = new LastInsertId(); } public function getServerVersion() { $serverInfo = sqlsrv_server_info($this->conn); return $serverInfo['SQLServerVersion']; } public function requiresQueryForServerVersion() { return false; } public function prepare($sql) { return new SQLSrvStatement($this->conn, $sql, $this->lastInsertId); } public function query() { $args = func_get_args(); $sql = $args[0]; $stmt = $this->prepare($sql); $stmt->execute(); return $stmt; } public function quote($value, $type=\PDO::PARAM_STR) { if (is_int($value)) { return $value; } elseif (is_float($value)) { return sprintf('%F', $value); } return "'" . str_replace("'", "''", $value) . "'"; } public function exec($statement) { $stmt = $this->prepare($statement); $stmt->execute(); return $stmt->rowCount(); } public function lastInsertId($name = null) { if ($name !== null) { $stmt = $this->prepare('SELECT CONVERT(VARCHAR(MAX), current_value) FROM sys.sequences WHERE name = ?'); $stmt->execute(array($name)); return $stmt->fetchColumn(); } return $this->lastInsertId->getId(); } public function beginTransaction() { if ( ! sqlsrv_begin_transaction($this->conn)) { throw SQLSrvException::fromSqlSrvErrors(); } } public function commit() { if ( ! sqlsrv_commit($this->conn)) { throw SQLSrvException::fromSqlSrvErrors(); } } public function rollBack() { if ( ! sqlsrv_rollback($this->conn)) { throw SQLSrvException::fromSqlSrvErrors(); } } public function errorCode() { $errors = sqlsrv_errors(SQLSRV_ERR_ERRORS); if ($errors) { return $errors[0]['code']; } return false; } public function errorInfo() { return sqlsrv_errors(SQLSRV_ERR_ERRORS); } } 
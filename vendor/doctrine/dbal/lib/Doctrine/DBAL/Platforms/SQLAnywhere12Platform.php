<?php
 namespace Doctrine\DBAL\Platforms; use Doctrine\DBAL\Schema\Index; use Doctrine\DBAL\Schema\Sequence; class SQLAnywhere12Platform extends SQLAnywhere11Platform { public function getCreateSequenceSQL(Sequence $sequence) { return 'CREATE SEQUENCE ' . $sequence->getQuotedName($this) . ' INCREMENT BY ' . $sequence->getAllocationSize() . ' START WITH ' . $sequence->getInitialValue() . ' MINVALUE ' . $sequence->getInitialValue(); } public function getAlterSequenceSQL(Sequence $sequence) { return 'ALTER SEQUENCE ' . $sequence->getQuotedName($this) . ' INCREMENT BY ' . $sequence->getAllocationSize(); } public function getDateTimeTzFormatString() { return 'Y-m-d H:i:s.uP'; } public function getDateTimeTzTypeDeclarationSQL(array $fieldDeclaration) { return 'TIMESTAMP WITH TIME ZONE'; } public function getDropSequenceSQL($sequence) { if ($sequence instanceof Sequence) { $sequence = $sequence->getQuotedName($this); } return 'DROP SEQUENCE ' . $sequence; } public function getListSequencesSQL($database) { return 'SELECT sequence_name, increment_by, start_with, min_value FROM SYS.SYSSEQUENCE'; } public function getSequenceNextValSQL($sequenceName) { return 'SELECT ' . $sequenceName . '.NEXTVAL'; } public function supportsSequences() { return true; } protected function getAdvancedIndexOptionsSQL(Index $index) { if ( ! $index->isPrimary() && $index->isUnique() && $index->hasFlag('with_nulls_not_distinct')) { return ' WITH NULLS NOT DISTINCT' . parent::getAdvancedIndexOptionsSQL($index); } return parent::getAdvancedIndexOptionsSQL($index); } protected function getReservedKeywordsClass() { return 'Doctrine\DBAL\Platforms\Keywords\SQLAnywhere12Keywords'; } protected function initializeDoctrineTypeMappings() { parent::initializeDoctrineTypeMappings(); $this->doctrineTypeMapping['timestamp with time zone'] = 'datetime'; } } 
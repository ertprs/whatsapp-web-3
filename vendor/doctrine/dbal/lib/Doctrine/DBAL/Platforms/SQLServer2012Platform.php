<?php
 namespace Doctrine\DBAL\Platforms; use Doctrine\DBAL\Schema\Sequence; class SQLServer2012Platform extends SQLServer2008Platform { public function getAlterSequenceSQL(Sequence $sequence) { return 'ALTER SEQUENCE ' . $sequence->getQuotedName($this) . ' INCREMENT BY ' . $sequence->getAllocationSize(); } public function getCreateSequenceSQL(Sequence $sequence) { return 'CREATE SEQUENCE ' . $sequence->getQuotedName($this) . ' START WITH ' . $sequence->getInitialValue() . ' INCREMENT BY ' . $sequence->getAllocationSize() . ' MINVALUE ' . $sequence->getInitialValue(); } public function getDropSequenceSQL($sequence) { if ($sequence instanceof Sequence) { $sequence = $sequence->getQuotedName($this); } return 'DROP SEQUENCE ' . $sequence; } public function getListSequencesSQL($database) { return 'SELECT seq.name,
                       CAST(
                           seq.increment AS VARCHAR(MAX)
                       ) AS increment, -- CAST avoids driver error for sql_variant type
                       CAST(
                           seq.start_value AS VARCHAR(MAX)
                       ) AS start_value -- CAST avoids driver error for sql_variant type
                FROM   sys.sequences AS seq'; } public function getSequenceNextValSQL($sequenceName) { return 'SELECT NEXT VALUE FOR ' . $sequenceName; } public function supportsSequences() { return true; } protected function getReservedKeywordsClass() { return 'Doctrine\DBAL\Platforms\Keywords\SQLServer2012Keywords'; } protected function doModifyLimitQuery($query, $limit, $offset = null) { if ($limit === null && $offset === null) { return $query; } $matches = array(); $matchesCount = preg_match_all("/[\\s]+order by /i", $query, $matches, PREG_OFFSET_CAPTURE); $orderByPos = false; if ($matchesCount > 0) { $orderByPos = $matches[0][($matchesCount - 1)][1]; } if ($orderByPos === false || substr_count($query, "(", $orderByPos) - substr_count($query, ")", $orderByPos) ) { if (stripos($query, 'SELECT DISTINCT') === 0) { $query .= " ORDER BY 1"; } else { $query .= " ORDER BY (SELECT 0)"; } } if ($offset === null) { $offset = 0; } $query .= " OFFSET " . (int) $offset . " ROWS"; if ($limit !== null) { $query .= " FETCH NEXT " . (int) $limit . " ROWS ONLY"; } return $query; } } 
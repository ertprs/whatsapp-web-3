<?php
 namespace Doctrine\DBAL\Query\Expression; use Doctrine\DBAL\Connection; class ExpressionBuilder { const EQ = '='; const NEQ = '<>'; const LT = '<'; const LTE = '<='; const GT = '>'; const GTE = '>='; private $connection; public function __construct(Connection $connection) { $this->connection = $connection; } public function andX($x = null) { return new CompositeExpression(CompositeExpression::TYPE_AND, func_get_args()); } public function orX($x = null) { return new CompositeExpression(CompositeExpression::TYPE_OR, func_get_args()); } public function comparison($x, $operator, $y) { return $x . ' ' . $operator . ' ' . $y; } public function eq($x, $y) { return $this->comparison($x, self::EQ, $y); } public function neq($x, $y) { return $this->comparison($x, self::NEQ, $y); } public function lt($x, $y) { return $this->comparison($x, self::LT, $y); } public function lte($x, $y) { return $this->comparison($x, self::LTE, $y); } public function gt($x, $y) { return $this->comparison($x, self::GT, $y); } public function gte($x, $y) { return $this->comparison($x, self::GTE, $y); } public function isNull($x) { return $x . ' IS NULL'; } public function isNotNull($x) { return $x . ' IS NOT NULL'; } public function like($x, $y) { return $this->comparison($x, 'LIKE', $y); } public function notLike($x, $y) { return $this->comparison($x, 'NOT LIKE', $y); } public function in($x, $y) { return $this->comparison($x, 'IN', '('.implode(', ', (array) $y).')'); } public function notIn($x, $y) { return $this->comparison($x, 'NOT IN', '('.implode(', ', (array) $y).')'); } public function literal($input, $type = null) { return $this->connection->quote($input, $type); } } 
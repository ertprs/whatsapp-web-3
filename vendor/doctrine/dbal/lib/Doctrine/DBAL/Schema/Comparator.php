<?php
 namespace Doctrine\DBAL\Schema; use Doctrine\DBAL\Types; class Comparator { static public function compareSchemas(Schema $fromSchema, Schema $toSchema) { $c = new self(); return $c->compare($fromSchema, $toSchema); } public function compare(Schema $fromSchema, Schema $toSchema) { $diff = new SchemaDiff(); $diff->fromSchema = $fromSchema; $foreignKeysToTable = array(); foreach ($toSchema->getNamespaces() as $namespace) { if ( ! $fromSchema->hasNamespace($namespace)) { $diff->newNamespaces[$namespace] = $namespace; } } foreach ($fromSchema->getNamespaces() as $namespace) { if ( ! $toSchema->hasNamespace($namespace)) { $diff->removedNamespaces[$namespace] = $namespace; } } foreach ($toSchema->getTables() as $table) { $tableName = $table->getShortestName($toSchema->getName()); if ( ! $fromSchema->hasTable($tableName)) { $diff->newTables[$tableName] = $toSchema->getTable($tableName); } else { $tableDifferences = $this->diffTable($fromSchema->getTable($tableName), $toSchema->getTable($tableName)); if ($tableDifferences !== false) { $diff->changedTables[$tableName] = $tableDifferences; } } } foreach ($fromSchema->getTables() as $table) { $tableName = $table->getShortestName($fromSchema->getName()); $table = $fromSchema->getTable($tableName); if ( ! $toSchema->hasTable($tableName)) { $diff->removedTables[$tableName] = $table; } foreach ($table->getForeignKeys() as $foreignKey) { $foreignTable = strtolower($foreignKey->getForeignTableName()); if (!isset($foreignKeysToTable[$foreignTable])) { $foreignKeysToTable[$foreignTable] = array(); } $foreignKeysToTable[$foreignTable][] = $foreignKey; } } foreach ($diff->removedTables as $tableName => $table) { if (isset($foreignKeysToTable[$tableName])) { $diff->orphanedForeignKeys = array_merge($diff->orphanedForeignKeys, $foreignKeysToTable[$tableName]); foreach ($foreignKeysToTable[$tableName] as $foreignKey) { $localTableName = strtolower($foreignKey->getLocalTableName()); if (isset($diff->changedTables[$localTableName])) { foreach ($diff->changedTables[$localTableName]->removedForeignKeys as $key => $removedForeignKey) { if ($tableName !== strtolower($removedForeignKey->getForeignTableName())) { continue; } unset($diff->changedTables[$localTableName]->removedForeignKeys[$key]); } } } } } foreach ($toSchema->getSequences() as $sequence) { $sequenceName = $sequence->getShortestName($toSchema->getName()); if ( ! $fromSchema->hasSequence($sequenceName)) { if ( ! $this->isAutoIncrementSequenceInSchema($fromSchema, $sequence)) { $diff->newSequences[] = $sequence; } } else { if ($this->diffSequence($sequence, $fromSchema->getSequence($sequenceName))) { $diff->changedSequences[] = $toSchema->getSequence($sequenceName); } } } foreach ($fromSchema->getSequences() as $sequence) { if ($this->isAutoIncrementSequenceInSchema($toSchema, $sequence)) { continue; } $sequenceName = $sequence->getShortestName($fromSchema->getName()); if ( ! $toSchema->hasSequence($sequenceName)) { $diff->removedSequences[] = $sequence; } } return $diff; } private function isAutoIncrementSequenceInSchema($schema, $sequence) { foreach ($schema->getTables() as $table) { if ($sequence->isAutoIncrementsFor($table)) { return true; } } return false; } public function diffSequence(Sequence $sequence1, Sequence $sequence2) { if ($sequence1->getAllocationSize() != $sequence2->getAllocationSize()) { return true; } if ($sequence1->getInitialValue() != $sequence2->getInitialValue()) { return true; } return false; } public function diffTable(Table $table1, Table $table2) { $changes = 0; $tableDifferences = new TableDiff($table1->getName()); $tableDifferences->fromTable = $table1; $table1Columns = $table1->getColumns(); $table2Columns = $table2->getColumns(); foreach ($table2Columns as $columnName => $column) { if ( !$table1->hasColumn($columnName)) { $tableDifferences->addedColumns[$columnName] = $column; $changes++; } } foreach ($table1Columns as $columnName => $column) { if ( ! $table2->hasColumn($columnName)) { $tableDifferences->removedColumns[$columnName] = $column; $changes++; continue; } $changedProperties = $this->diffColumn($column, $table2->getColumn($columnName)); if ( ! empty($changedProperties)) { $columnDiff = new ColumnDiff($column->getName(), $table2->getColumn($columnName), $changedProperties); $columnDiff->fromColumn = $column; $tableDifferences->changedColumns[$column->getName()] = $columnDiff; $changes++; } } $this->detectColumnRenamings($tableDifferences); $table1Indexes = $table1->getIndexes(); $table2Indexes = $table2->getIndexes(); foreach ($table2Indexes as $indexName => $index) { if (($index->isPrimary() && $table1->hasPrimaryKey()) || $table1->hasIndex($indexName)) { continue; } $tableDifferences->addedIndexes[$indexName] = $index; $changes++; } foreach ($table1Indexes as $indexName => $index) { if (($index->isPrimary() && ! $table2->hasPrimaryKey()) || ! $index->isPrimary() && ! $table2->hasIndex($indexName) ) { $tableDifferences->removedIndexes[$indexName] = $index; $changes++; continue; } $table2Index = $index->isPrimary() ? $table2->getPrimaryKey() : $table2->getIndex($indexName); if ($this->diffIndex($index, $table2Index)) { $tableDifferences->changedIndexes[$indexName] = $table2Index; $changes++; } } $this->detectIndexRenamings($tableDifferences); $fromFkeys = $table1->getForeignKeys(); $toFkeys = $table2->getForeignKeys(); foreach ($fromFkeys as $key1 => $constraint1) { foreach ($toFkeys as $key2 => $constraint2) { if ($this->diffForeignKey($constraint1, $constraint2) === false) { unset($fromFkeys[$key1]); unset($toFkeys[$key2]); } else { if (strtolower($constraint1->getName()) == strtolower($constraint2->getName())) { $tableDifferences->changedForeignKeys[] = $constraint2; $changes++; unset($fromFkeys[$key1]); unset($toFkeys[$key2]); } } } } foreach ($fromFkeys as $constraint1) { $tableDifferences->removedForeignKeys[] = $constraint1; $changes++; } foreach ($toFkeys as $constraint2) { $tableDifferences->addedForeignKeys[] = $constraint2; $changes++; } return $changes ? $tableDifferences : false; } private function detectColumnRenamings(TableDiff $tableDifferences) { $renameCandidates = array(); foreach ($tableDifferences->addedColumns as $addedColumnName => $addedColumn) { foreach ($tableDifferences->removedColumns as $removedColumn) { if (count($this->diffColumn($addedColumn, $removedColumn)) == 0) { $renameCandidates[$addedColumn->getName()][] = array($removedColumn, $addedColumn, $addedColumnName); } } } foreach ($renameCandidates as $candidateColumns) { if (count($candidateColumns) == 1) { list($removedColumn, $addedColumn) = $candidateColumns[0]; $removedColumnName = strtolower($removedColumn->getName()); $addedColumnName = strtolower($addedColumn->getName()); if ( ! isset($tableDifferences->renamedColumns[$removedColumnName])) { $tableDifferences->renamedColumns[$removedColumnName] = $addedColumn; unset($tableDifferences->addedColumns[$addedColumnName]); unset($tableDifferences->removedColumns[$removedColumnName]); } } } } private function detectIndexRenamings(TableDiff $tableDifferences) { $renameCandidates = array(); foreach ($tableDifferences->addedIndexes as $addedIndexName => $addedIndex) { foreach ($tableDifferences->removedIndexes as $removedIndex) { if (! $this->diffIndex($addedIndex, $removedIndex)) { $renameCandidates[$addedIndex->getName()][] = array($removedIndex, $addedIndex, $addedIndexName); } } } foreach ($renameCandidates as $candidateIndexes) { if (count($candidateIndexes) === 1) { list($removedIndex, $addedIndex) = $candidateIndexes[0]; $removedIndexName = strtolower($removedIndex->getName()); $addedIndexName = strtolower($addedIndex->getName()); if (! isset($tableDifferences->renamedIndexes[$removedIndexName])) { $tableDifferences->renamedIndexes[$removedIndexName] = $addedIndex; unset($tableDifferences->addedIndexes[$addedIndexName]); unset($tableDifferences->removedIndexes[$removedIndexName]); } } } } public function diffForeignKey(ForeignKeyConstraint $key1, ForeignKeyConstraint $key2) { if (array_map('strtolower', $key1->getUnquotedLocalColumns()) != array_map('strtolower', $key2->getUnquotedLocalColumns())) { return true; } if (array_map('strtolower', $key1->getUnquotedForeignColumns()) != array_map('strtolower', $key2->getUnquotedForeignColumns())) { return true; } if ($key1->getUnqualifiedForeignTableName() !== $key2->getUnqualifiedForeignTableName()) { return true; } if ($key1->onUpdate() != $key2->onUpdate()) { return true; } if ($key1->onDelete() != $key2->onDelete()) { return true; } return false; } public function diffColumn(Column $column1, Column $column2) { $properties1 = $column1->toArray(); $properties2 = $column2->toArray(); $changedProperties = array(); foreach (array('type', 'notnull', 'unsigned', 'autoincrement') as $property) { if ($properties1[$property] != $properties2[$property]) { $changedProperties[] = $property; } } if ($properties1['default'] != $properties2['default'] || (null === $properties1['default'] && null !== $properties2['default']) || (null === $properties2['default'] && null !== $properties1['default']) ) { $changedProperties[] = 'default'; } if (($properties1['type'] instanceof Types\StringType && ! $properties1['type'] instanceof Types\GuidType) || $properties1['type'] instanceof Types\BinaryType ) { $length1 = $properties1['length'] ?: 255; $length2 = $properties2['length'] ?: 255; if ($length1 != $length2) { $changedProperties[] = 'length'; } if ($properties1['fixed'] != $properties2['fixed']) { $changedProperties[] = 'fixed'; } } elseif ($properties1['type'] instanceof Types\DecimalType) { if (($properties1['precision'] ?: 10) != ($properties2['precision'] ?: 10)) { $changedProperties[] = 'precision'; } if ($properties1['scale'] != $properties2['scale']) { $changedProperties[] = 'scale'; } } if ($properties1['comment'] !== $properties2['comment'] && ! (null === $properties1['comment'] && '' === $properties2['comment']) && ! (null === $properties2['comment'] && '' === $properties1['comment']) ) { $changedProperties[] = 'comment'; } $customOptions1 = $column1->getCustomSchemaOptions(); $customOptions2 = $column2->getCustomSchemaOptions(); foreach (array_merge(array_keys($customOptions1), array_keys($customOptions2)) as $key) { if ( ! array_key_exists($key, $properties1) || ! array_key_exists($key, $properties2)) { $changedProperties[] = $key; } elseif ($properties1[$key] !== $properties2[$key]) { $changedProperties[] = $key; } } $platformOptions1 = $column1->getPlatformOptions(); $platformOptions2 = $column2->getPlatformOptions(); foreach (array_keys(array_intersect_key($platformOptions1, $platformOptions2)) as $key) { if ($properties1[$key] !== $properties2[$key]) { $changedProperties[] = $key; } } return array_unique($changedProperties); } public function diffIndex(Index $index1, Index $index2) { if ($index1->isFullfilledBy($index2) && $index2->isFullfilledBy($index1)) { return false; } return true; } } 
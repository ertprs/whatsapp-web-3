<?php
 namespace Doctrine\DBAL\Schema; use Doctrine\DBAL\DBALException; use Doctrine\DBAL\Driver\DriverException; use Doctrine\DBAL\Types\Type; class SQLServerSchemaManager extends AbstractSchemaManager { public function dropDatabase($database) { try { parent::dropDatabase($database); } catch (DBALException $exception) { $exception = $exception->getPrevious(); if (! $exception instanceof DriverException) { throw $exception; } if ($exception->getErrorCode() !== 3702) { throw $exception; } $this->closeActiveDatabaseConnections($database); parent::dropDatabase($database); } } protected function _getPortableSequenceDefinition($sequence) { return new Sequence($sequence['name'], $sequence['increment'], $sequence['start_value']); } protected function _getPortableTableColumnDefinition($tableColumn) { $dbType = strtok($tableColumn['type'], '(), '); $fixed = null; $length = (int) $tableColumn['length']; $default = $tableColumn['default']; if (!isset($tableColumn['name'])) { $tableColumn['name'] = ''; } while ($default != ($default2 = preg_replace("/^\((.*)\)$/", '$1', $default))) { $default = trim($default2, "'"); if ($default == 'getdate()') { $default = $this->_platform->getCurrentTimestampSQL(); } } switch ($dbType) { case 'nchar': case 'nvarchar': case 'ntext': $length = $length / 2; break; case 'varchar': if ($length == -1) { $dbType = 'text'; } break; } if ('char' === $dbType || 'nchar' === $dbType || 'binary' === $dbType) { $fixed = true; } $type = $this->_platform->getDoctrineTypeMapping($dbType); $type = $this->extractDoctrineTypeFromComment($tableColumn['comment'], $type); $tableColumn['comment'] = $this->removeDoctrineTypeFromComment($tableColumn['comment'], $type); $options = array( 'length' => ($length == 0 || !in_array($type, array('text', 'string'))) ? null : $length, 'unsigned' => false, 'fixed' => (bool) $fixed, 'default' => $default !== 'NULL' ? $default : null, 'notnull' => (bool) $tableColumn['notnull'], 'scale' => $tableColumn['scale'], 'precision' => $tableColumn['precision'], 'autoincrement' => (bool) $tableColumn['autoincrement'], 'comment' => $tableColumn['comment'] !== '' ? $tableColumn['comment'] : null, ); $column = new Column($tableColumn['name'], Type::getType($type), $options); if (isset($tableColumn['collation']) && $tableColumn['collation'] !== 'NULL') { $column->setPlatformOption('collation', $tableColumn['collation']); } return $column; } protected function _getPortableTableForeignKeysList($tableForeignKeys) { $foreignKeys = array(); foreach ($tableForeignKeys as $tableForeignKey) { if ( ! isset($foreignKeys[$tableForeignKey['ForeignKey']])) { $foreignKeys[$tableForeignKey['ForeignKey']] = array( 'local_columns' => array($tableForeignKey['ColumnName']), 'foreign_table' => $tableForeignKey['ReferenceTableName'], 'foreign_columns' => array($tableForeignKey['ReferenceColumnName']), 'name' => $tableForeignKey['ForeignKey'], 'options' => array( 'onUpdate' => str_replace('_', ' ', $tableForeignKey['update_referential_action_desc']), 'onDelete' => str_replace('_', ' ', $tableForeignKey['delete_referential_action_desc']) ) ); } else { $foreignKeys[$tableForeignKey['ForeignKey']]['local_columns'][] = $tableForeignKey['ColumnName']; $foreignKeys[$tableForeignKey['ForeignKey']]['foreign_columns'][] = $tableForeignKey['ReferenceColumnName']; } } return parent::_getPortableTableForeignKeysList($foreignKeys); } protected function _getPortableTableIndexesList($tableIndexRows, $tableName=null) { foreach ($tableIndexRows as &$tableIndex) { $tableIndex['non_unique'] = (boolean) $tableIndex['non_unique']; $tableIndex['primary'] = (boolean) $tableIndex['primary']; $tableIndex['flags'] = $tableIndex['flags'] ? array($tableIndex['flags']) : null; } return parent::_getPortableTableIndexesList($tableIndexRows, $tableName); } protected function _getPortableTableForeignKeyDefinition($tableForeignKey) { return new ForeignKeyConstraint( $tableForeignKey['local_columns'], $tableForeignKey['foreign_table'], $tableForeignKey['foreign_columns'], $tableForeignKey['name'], $tableForeignKey['options'] ); } protected function _getPortableTableDefinition($table) { return $table['name']; } protected function _getPortableDatabaseDefinition($database) { return $database['name']; } protected function getPortableNamespaceDefinition(array $namespace) { return $namespace['name']; } protected function _getPortableViewDefinition($view) { return new View($view['name'], null); } public function listTableIndexes($table) { $sql = $this->_platform->getListTableIndexesSQL($table, $this->_conn->getDatabase()); try { $tableIndexes = $this->_conn->fetchAll($sql); } catch (\PDOException $e) { if ($e->getCode() == "IMSSP") { return array(); } else { throw $e; } } catch (DBALException $e) { if (strpos($e->getMessage(), 'SQLSTATE [01000, 15472]') === 0) { return array(); } else { throw $e; } } return $this->_getPortableTableIndexesList($tableIndexes, $table); } public function alterTable(TableDiff $tableDiff) { if (count($tableDiff->removedColumns) > 0) { foreach ($tableDiff->removedColumns as $col) { $columnConstraintSql = $this->getColumnConstraintSQL($tableDiff->name, $col->getName()); foreach ($this->_conn->fetchAll($columnConstraintSql) as $constraint) { $this->_conn->exec("ALTER TABLE $tableDiff->name DROP CONSTRAINT " . $constraint['Name']); } } } parent::alterTable($tableDiff); } private function getColumnConstraintSQL($table, $column) { return "SELECT SysObjects.[Name]
            FROM SysObjects INNER JOIN (SELECT [Name],[ID] FROM SysObjects WHERE XType = 'U') AS Tab
            ON Tab.[ID] = Sysobjects.[Parent_Obj]
            INNER JOIN sys.default_constraints DefCons ON DefCons.[object_id] = Sysobjects.[ID]
            INNER JOIN SysColumns Col ON Col.[ColID] = DefCons.[parent_column_id] AND Col.[ID] = Tab.[ID]
            WHERE Col.[Name] = " . $this->_conn->quote($column) ." AND Tab.[Name] = " . $this->_conn->quote($table) . "
            ORDER BY Col.[Name]"; } private function closeActiveDatabaseConnections($database) { $database = new Identifier($database); $this->_execSql( sprintf( 'ALTER DATABASE %s SET SINGLE_USER WITH ROLLBACK IMMEDIATE', $database->getQuotedName($this->_platform) ) ); } } 
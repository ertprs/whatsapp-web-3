<?php
 namespace Doctrine\DBAL\Schema; use Doctrine\DBAL\Schema\Visitor\Visitor; class Sequence extends AbstractAsset { protected $allocationSize = 1; protected $initialValue = 1; protected $cache = null; public function __construct($name, $allocationSize = 1, $initialValue = 1, $cache = null) { $this->_setName($name); $this->allocationSize = is_numeric($allocationSize) ? $allocationSize : 1; $this->initialValue = is_numeric($initialValue) ? $initialValue : 1; $this->cache = $cache; } public function getAllocationSize() { return $this->allocationSize; } public function getInitialValue() { return $this->initialValue; } public function getCache() { return $this->cache; } public function setAllocationSize($allocationSize) { $this->allocationSize = is_numeric($allocationSize) ? $allocationSize : 1; return $this; } public function setInitialValue($initialValue) { $this->initialValue = is_numeric($initialValue) ? $initialValue : 1; return $this; } public function setCache($cache) { $this->cache = $cache; return $this; } public function isAutoIncrementsFor(Table $table) { if ( ! $table->hasPrimaryKey()) { return false; } $pkColumns = $table->getPrimaryKey()->getColumns(); if (count($pkColumns) != 1) { return false; } $column = $table->getColumn($pkColumns[0]); if ( ! $column->getAutoincrement()) { return false; } $sequenceName = $this->getShortestName($table->getNamespaceName()); $tableName = $table->getShortestName($table->getNamespaceName()); $tableSequenceName = sprintf('%s_%s_seq', $tableName, $column->getShortestName($table->getNamespaceName())); return $tableSequenceName === $sequenceName; } public function visit(Visitor $visitor) { $visitor->acceptSequence($this); } } 
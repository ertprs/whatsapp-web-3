<?php
 namespace Doctrine\DBAL\Schema\Visitor; use Doctrine\DBAL\Platforms\AbstractPlatform; use Doctrine\DBAL\Schema\Table; use Doctrine\DBAL\Schema\ForeignKeyConstraint; use Doctrine\DBAL\Schema\Sequence; use Doctrine\DBAL\Schema\SchemaException; class DropSchemaSqlCollector extends AbstractVisitor { private $constraints; private $sequences; private $tables; private $platform; public function __construct(AbstractPlatform $platform) { $this->platform = $platform; $this->clearQueries(); } public function acceptTable(Table $table) { $this->tables->attach($table); } public function acceptForeignKey(Table $localTable, ForeignKeyConstraint $fkConstraint) { if (strlen($fkConstraint->getName()) == 0) { throw SchemaException::namedForeignKeyRequired($localTable, $fkConstraint); } $this->constraints->attach($fkConstraint, $localTable); } public function acceptSequence(Sequence $sequence) { $this->sequences->attach($sequence); } public function clearQueries() { $this->constraints = new \SplObjectStorage(); $this->sequences = new \SplObjectStorage(); $this->tables = new \SplObjectStorage(); } public function getQueries() { $sql = array(); foreach ($this->constraints as $fkConstraint) { $localTable = $this->constraints[$fkConstraint]; $sql[] = $this->platform->getDropForeignKeySQL($fkConstraint, $localTable); } foreach ($this->sequences as $sequence) { $sql[] = $this->platform->getDropSequenceSQL($sequence); } foreach ($this->tables as $table) { $sql[] = $this->platform->getDropTableSQL($table); } return $sql; } } 
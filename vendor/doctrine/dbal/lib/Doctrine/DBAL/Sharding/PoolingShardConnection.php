<?php
 namespace Doctrine\DBAL\Sharding; use Doctrine\Common\EventManager; use Doctrine\DBAL\Configuration; use Doctrine\DBAL\Connection; use Doctrine\DBAL\Driver; use Doctrine\DBAL\Event\ConnectionEventArgs; use Doctrine\DBAL\Events; use Doctrine\DBAL\Sharding\ShardChoser\ShardChoser; class PoolingShardConnection extends Connection { private $activeConnections; private $activeShardId; private $connections; public function __construct(array $params, Driver $driver, Configuration $config = null, EventManager $eventManager = null) { if ( !isset($params['global']) || !isset($params['shards'])) { throw new \InvalidArgumentException("Connection Parameters require 'global' and 'shards' configurations."); } if ( !isset($params['shardChoser'])) { throw new \InvalidArgumentException("Missing Shard Choser configuration 'shardChoser'"); } if (is_string($params['shardChoser'])) { $params['shardChoser'] = new $params['shardChoser']; } if ( ! ($params['shardChoser'] instanceof ShardChoser)) { throw new \InvalidArgumentException("The 'shardChoser' configuration is not a valid instance of Doctrine\DBAL\Sharding\ShardChoser\ShardChoser"); } $this->connections[0] = array_merge($params, $params['global']); foreach ($params['shards'] as $shard) { if ( ! isset($shard['id'])) { throw new \InvalidArgumentException("Missing 'id' for one configured shard. Please specify a unique shard-id."); } if ( !is_numeric($shard['id']) || $shard['id'] < 1) { throw new \InvalidArgumentException("Shard Id has to be a non-negative number."); } if (isset($this->connections[$shard['id']])) { throw new \InvalidArgumentException("Shard " . $shard['id'] . " is duplicated in the configuration."); } $this->connections[$shard['id']] = array_merge($params, $shard); } parent::__construct($params, $driver, $config, $eventManager); } public function getActiveShardId() { return $this->activeShardId; } public function getParams() { return $this->activeShardId ? $this->connections[$this->activeShardId] : $this->connections[0]; } public function getHost() { $params = $this->getParams(); return isset($params['host']) ? $params['host'] : parent::getHost(); } public function getPort() { $params = $this->getParams(); return isset($params['port']) ? $params['port'] : parent::getPort(); } public function getUsername() { $params = $this->getParams(); return isset($params['user']) ? $params['user'] : parent::getUsername(); } public function getPassword() { $params = $this->getParams(); return isset($params['password']) ? $params['password'] : parent::getPassword(); } public function connect($shardId = null) { if ($shardId === null && $this->_conn) { return false; } if ($shardId !== null && $shardId === $this->activeShardId) { return false; } if ($this->getTransactionNestingLevel() > 0) { throw new ShardingException("Cannot switch shard when transaction is active."); } $this->activeShardId = (int)$shardId; if (isset($this->activeConnections[$this->activeShardId])) { $this->_conn = $this->activeConnections[$this->activeShardId]; return false; } $this->_conn = $this->activeConnections[$this->activeShardId] = $this->connectTo($this->activeShardId); if ($this->_eventManager->hasListeners(Events::postConnect)) { $eventArgs = new ConnectionEventArgs($this); $this->_eventManager->dispatchEvent(Events::postConnect, $eventArgs); } return true; } protected function connectTo($shardId) { $params = $this->getParams(); $driverOptions = isset($params['driverOptions']) ? $params['driverOptions'] : array(); $connectionParams = $this->connections[$shardId]; $user = isset($connectionParams['user']) ? $connectionParams['user'] : null; $password = isset($connectionParams['password']) ? $connectionParams['password'] : null; return $this->_driver->connect($connectionParams, $user, $password, $driverOptions); } public function isConnected($shardId = null) { if ($shardId === null) { return $this->_conn !== null; } return isset($this->activeConnections[$shardId]); } public function close() { $this->_conn = null; $this->activeConnections = null; $this->activeShardId = null; } } 
<?php
 namespace Doctrine\Tests\DBAL\Functional\Driver; use Doctrine\DBAL\Driver\PDOConnection; use Doctrine\Tests\DbalFunctionalTestCase; class PDOConnectionTest extends DbalFunctionalTestCase { protected $driverConnection; protected function setUp() { if ( ! extension_loaded('PDO')) { $this->markTestSkipped('PDO is not installed.'); } parent::setUp(); $this->driverConnection = $this->_conn->getWrappedConnection(); if ( ! $this->driverConnection instanceof PDOConnection) { $this->markTestSkipped('PDO connection only test.'); } } protected function tearDown() { $this->resetSharedConn(); parent::tearDown(); } public function testDoesNotRequireQueryForServerVersion() { $this->assertFalse($this->driverConnection->requiresQueryForServerVersion()); } public function testThrowsWrappedExceptionOnConstruct() { new PDOConnection('foo'); } public function testThrowsWrappedExceptionOnExec() { $this->driverConnection->exec('foo'); } public function testThrowsWrappedExceptionOnPrepare() { if ($this->_conn->getDriver()->getName() === 'pdo_sqlsrv') { $this->markTestSkipped('pdo_sqlsrv does not allow setting PDO::ATTR_EMULATE_PREPARES at connection level.'); } $this->driverConnection->setAttribute(\PDO::ATTR_EMULATE_PREPARES, false); $this->driverConnection->prepare('foo'); $this->markTestSkipped( sprintf( 'The PDO adapter %s does not check the query to be prepared server-side, ' . 'so no assertions can be made.', $this->_conn->getDriver()->getName() ) ); } public function testThrowsWrappedExceptionOnQuery() { $this->driverConnection->query('foo'); } } 
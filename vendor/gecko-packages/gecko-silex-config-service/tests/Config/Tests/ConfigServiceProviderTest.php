<?php
 namespace GeckoPackages\Silex\Services\Config\Tests; use GeckoPackages\Silex\Services\Config\ConfigServiceProvider; use Silex\Application; final class ConfigServiceProviderTest extends AbstractConfigTest { public function testServiceRegisterNaming() { $app = new Application(); $app['debug'] = true; $configDatabaseDir = realpath(__DIR__.'/../../assets').'/'; $app->register(new ConfigServiceProvider('config.database'), array('config.database.dir' => $configDatabaseDir)); $configTest = realpath(__DIR__.'/../../Config').'/'; $app->register(new ConfigServiceProvider('config.test'), array('config.test.dir' => $configTest)); $this->assertFalse(isset($app['config'])); $this->assertTrue(isset($app['config.database'])); $this->assertInstanceOf('GeckoPackages\Silex\Services\Config\ConfigLoader', $app['config.database']); $this->assertSame($configDatabaseDir, $app['config.database']->getDir()); $this->assertTrue(isset($app['config.test'])); $this->assertInstanceOf('GeckoPackages\Silex\Services\Config\ConfigLoader', $app['config.test']); $this->assertSame($configTest, $app['config.test']->getDir()); } public function testPHPConfig() { $configValue = array('test' => 1, 'lvl2' => array('20' => 'two zero', 21 => 'two one')); $app = new Application(); $app['debug'] = true; $this->setupConfigService($app, '%key%.%env%.php.dist', null, 'unitTest'); for ($i = 0; $i < 2; ++$i) { $config = $app['config']->get('__conf'); $this->assertInternalType('array', $config); $this->assertNotEmpty($config); $this->assertSame($configValue, $config); } $this->assertTrue($app['config']->__isset('__conf')); $this->assertFalse($app['config']->__isset('__conf_invalid__')); $this->assertSame($configValue, $app['config']->__get('__conf')); } public function testYamlConfig() { $app = new Application(); $app['debug'] = true; $this->setupConfigService($app, '%key%.json'); $app['config']->setEnvironment('dev'); $app['config']->setFormat('%key%.%env%.yml'); $this->assertSame( array( 'foo' => 'bar', 'leveled' => array( 'one' => 1, 'two' => 'second', '3' => 1, ), ), $app['config']->get('test') ); $this->assertSame( array( 'bar' => 'foo', 'home' => 'here', ), $app['config']->get('test2') ); $this->assertArrayHasKey('bar', $app['config']['test2']); $this->assertSame('foo', $app['config']['test2']['bar']); } public function testJSONConfig() { $app = new Application(); $app['debug'] = true; $this->setupConfigService($app); $this->assertSame( array('options' => array('test' => array('driver' => 'pdo_mysql'))), $app['config']->get('test') ); $app['config']->flushConfig('test'); $app['config']->flushConfig('test1'); } public function testDirSwapping() { $app = new Application(); $app['debug'] = true; $this->setupConfigService($app); $this->assertSame( array('options' => array('test' => array('driver' => 'pdo_mysql'))), $app['config']->get('test') ); $dir = $app['config']->getDir().'../config2'; $app['config']->setDir($dir); $this->assertSame( array('options' => array('test2' => 'new_dir')), $app['config']->get('test') ); $this->assertTrue($app['config']->offsetExists('test')); $this->assertFalse($app['config']->offsetExists('test123')); } public function testDirNotValidException() { $app = new Application(); $app['debug'] = true; $app->register(new ConfigServiceProvider(), array('config.dir' => null)); $app['config']->setDir('/a/b/c/'); } public function testConfigFileNotFoundException($format) { $app = new Application(); $app['debug'] = true; $this->setupConfigService($app); $app['config']->setFormat($format); $app['config']->get('test_not_found'); } public function testFileFormatException($format) { $app = new Application(); $app['debug'] = true; $this->setupConfigService($app); $app['config']->setFormat($format); $app['config']->get('invalid'); } public function provideFormats() { $cases = array( array('%key%.json'), array('%key%.yml'), array('%key%.php'), ); return $cases; } public function testFileFormatNotSupportedException() { $app = new Application(); $app['debug'] = true; $this->setupConfigService($app); $app['config']->setFormat('%key%.xls'); } public function testFileFormatMissingKeyException() { $app = new Application(); $app['debug'] = true; $this->setupConfigService($app); $app['config']->setFormat('.xls'); } public function testFileFormatNotStringException() { $app = new Application(); $app['debug'] = true; $this->setupConfigService($app); $app['config']->setFormat(null); } public function testFileFormatNoExtensionException() { $app = new Application(); $app['debug'] = true; $this->setupConfigService($app); $app['config']->setFormat('%key%json'); } public function testJsonNotArray() { $app = new Application(); $app['debug'] = true; $this->setupConfigService($app); $app['config']->get('integer'); } } 
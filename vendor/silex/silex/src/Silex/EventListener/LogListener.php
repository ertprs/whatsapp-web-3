<?php
 namespace Silex\EventListener; use Psr\Log\LoggerInterface; use Psr\Log\LogLevel; use Symfony\Component\EventDispatcher\EventSubscriberInterface; use Symfony\Component\HttpKernel\Event\GetResponseEvent; use Symfony\Component\HttpKernel\Event\FilterResponseEvent; use Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent; use Symfony\Component\HttpKernel\KernelEvents; use Symfony\Component\HttpKernel\Exception\HttpExceptionInterface; use Symfony\Component\HttpFoundation\Request; use Symfony\Component\HttpFoundation\Response; use Symfony\Component\HttpFoundation\RedirectResponse; class LogListener implements EventSubscriberInterface { protected $logger; protected $exceptionLogFilter; public function __construct(LoggerInterface $logger, $exceptionLogFilter = null) { $this->logger = $logger; if (null === $exceptionLogFilter) { $exceptionLogFilter = function (\Exception $e) { if ($e instanceof HttpExceptionInterface && $e->getStatusCode() < 500) { return LogLevel::ERROR; } return LogLevel::CRITICAL; }; } $this->exceptionLogFilter = $exceptionLogFilter; } public function onKernelRequest(GetResponseEvent $event) { if (!$event->isMasterRequest()) { return; } $this->logRequest($event->getRequest()); } public function onKernelResponse(FilterResponseEvent $event) { if (!$event->isMasterRequest()) { return; } $this->logResponse($event->getResponse()); } public function onKernelException(GetResponseForExceptionEvent $event) { $this->logException($event->getException()); } protected function logRequest(Request $request) { $this->logger->log(LogLevel::DEBUG, '> '.$request->getMethod().' '.$request->getRequestUri()); } protected function logResponse(Response $response) { $message = '< '.$response->getStatusCode(); if ($response instanceof RedirectResponse) { $message .= ' '.$response->getTargetUrl(); } $this->logger->log(LogLevel::DEBUG, $message); } protected function logException(\Exception $e) { $this->logger->log(call_user_func($this->exceptionLogFilter, $e), sprintf('%s: %s (uncaught exception) at %s line %s', get_class($e), $e->getMessage(), $e->getFile(), $e->getLine()), array('exception' => $e)); } public static function getSubscribedEvents() { return array( KernelEvents::REQUEST => array('onKernelRequest', 0), KernelEvents::RESPONSE => array('onKernelResponse', 0), KernelEvents::EXCEPTION => array('onKernelException', -4), ); } } 
<?php
 namespace Silex\EventListener; use Symfony\Component\HttpKernel\KernelEvents; use Symfony\Component\HttpKernel\Event\GetResponseEvent; use Symfony\Component\HttpKernel\Event\FilterResponseEvent; use Symfony\Component\HttpFoundation\Response; use Symfony\Component\EventDispatcher\EventSubscriberInterface; use Silex\Application; class MiddlewareListener implements EventSubscriberInterface { protected $app; public function __construct(Application $app) { $this->app = $app; } public function onKernelRequest(GetResponseEvent $event) { $request = $event->getRequest(); $routeName = $request->attributes->get('_route'); if (!$route = $this->app['routes']->get($routeName)) { return; } foreach ((array) $route->getOption('_before_middlewares') as $callback) { $ret = call_user_func($this->app['callback_resolver']->resolveCallback($callback), $request, $this->app); if ($ret instanceof Response) { $event->setResponse($ret); return; } elseif (null !== $ret) { throw new \RuntimeException(sprintf('A before middleware for route "%s" returned an invalid response value. Must return null or an instance of Response.', $routeName)); } } } public function onKernelResponse(FilterResponseEvent $event) { $request = $event->getRequest(); $routeName = $request->attributes->get('_route'); if (!$route = $this->app['routes']->get($routeName)) { return; } foreach ((array) $route->getOption('_after_middlewares') as $callback) { $response = call_user_func($this->app['callback_resolver']->resolveCallback($callback), $request, $event->getResponse(), $this->app); if ($response instanceof Response) { $event->setResponse($response); } elseif (null !== $response) { throw new \RuntimeException(sprintf('An after middleware for route "%s" returned an invalid response value. Must return null or an instance of Response.', $routeName)); } } } public static function getSubscribedEvents() { return array( KernelEvents::REQUEST => array('onKernelRequest', -1024), KernelEvents::RESPONSE => array('onKernelResponse', 128), ); } } 
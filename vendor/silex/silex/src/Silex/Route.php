<?php
 namespace Silex; use Symfony\Component\Routing\Route as BaseRoute; class Route extends BaseRoute { public function __construct($path = '/', array $defaults = array(), array $requirements = array(), array $options = array(), $host = '', $schemes = array(), $methods = array()) { parent::__construct($path, $defaults, $requirements, $options, $host, $schemes, $methods); } public function run($to) { $this->setDefault('_controller', $to); return $this; } public function assert($variable, $regexp) { $this->setRequirement($variable, $regexp); return $this; } public function value($variable, $default) { $this->setDefault($variable, $default); return $this; } public function convert($variable, $callback) { $converters = $this->getOption('_converters'); $converters[$variable] = $callback; $this->setOption('_converters', $converters); return $this; } public function method($method) { $this->setMethods(explode('|', $method)); return $this; } public function host($host) { $this->setHost($host); return $this; } public function requireHttp() { $this->setSchemes('http'); return $this; } public function requireHttps() { $this->setSchemes('https'); return $this; } public function before($callback) { $callbacks = $this->getOption('_before_middlewares'); $callbacks[] = $callback; $this->setOption('_before_middlewares', $callbacks); return $this; } public function after($callback) { $callbacks = $this->getOption('_after_middlewares'); $callbacks[] = $callback; $this->setOption('_after_middlewares', $callbacks); return $this; } public function when($condition) { $this->setCondition($condition); return $this; } } 
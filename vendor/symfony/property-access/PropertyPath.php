<?php
 namespace Symfony\Component\PropertyAccess; use Symfony\Component\PropertyAccess\Exception\InvalidArgumentException; use Symfony\Component\PropertyAccess\Exception\InvalidPropertyPathException; use Symfony\Component\PropertyAccess\Exception\OutOfBoundsException; class PropertyPath implements \IteratorAggregate, PropertyPathInterface { const SINGULAR_SEPARATOR = '|'; private $elements = array(); private $length; private $isIndex = array(); private $pathAsString; public function __construct($propertyPath) { if ($propertyPath instanceof self) { $this->elements = $propertyPath->elements; $this->length = $propertyPath->length; $this->isIndex = $propertyPath->isIndex; $this->pathAsString = $propertyPath->pathAsString; return; } if (!is_string($propertyPath)) { throw new InvalidArgumentException(sprintf( 'The property path constructor needs a string or an instance of '. '"Symfony\Component\PropertyAccess\PropertyPath". '. 'Got: "%s"', is_object($propertyPath) ? get_class($propertyPath) : gettype($propertyPath) )); } if ('' === $propertyPath) { throw new InvalidPropertyPathException('The property path should not be empty.'); } $this->pathAsString = $propertyPath; $position = 0; $remaining = $propertyPath; $pattern = '/^(([^\.\[]++)|\[([^\]]++)\])(.*)/'; while (preg_match($pattern, $remaining, $matches)) { if ('' !== $matches[2]) { $element = $matches[2]; $this->isIndex[] = false; } else { $element = $matches[3]; $this->isIndex[] = true; } $this->elements[] = $element; $position += strlen($matches[1]); $remaining = $matches[4]; $pattern = '/^(\.([^\.|\[]++)|\[([^\]]++)\])(.*)/'; } if ('' !== $remaining) { throw new InvalidPropertyPathException(sprintf( 'Could not parse property path "%s". Unexpected token "%s" at position %d', $propertyPath, $remaining[0], $position )); } $this->length = count($this->elements); } public function __toString() { return $this->pathAsString; } public function getLength() { return $this->length; } public function getParent() { if ($this->length <= 1) { return; } $parent = clone $this; --$parent->length; $parent->pathAsString = substr($parent->pathAsString, 0, max(strrpos($parent->pathAsString, '.'), strrpos($parent->pathAsString, '['))); array_pop($parent->elements); array_pop($parent->isIndex); return $parent; } public function getIterator() { return new PropertyPathIterator($this); } public function getElements() { return $this->elements; } public function getElement($index) { if (!isset($this->elements[$index])) { throw new OutOfBoundsException(sprintf('The index %s is not within the property path', $index)); } return $this->elements[$index]; } public function isProperty($index) { if (!isset($this->isIndex[$index])) { throw new OutOfBoundsException(sprintf('The index %s is not within the property path', $index)); } return !$this->isIndex[$index]; } public function isIndex($index) { if (!isset($this->isIndex[$index])) { throw new OutOfBoundsException(sprintf('The index %s is not within the property path', $index)); } return $this->isIndex[$index]; } } 
<?php
 namespace Symfony\Component\PropertyAccess; use Symfony\Component\PropertyAccess\Exception\OutOfBoundsException; class PropertyPathBuilder { private $elements = array(); private $isIndex = array(); public function __construct($path = null) { if (null !== $path) { $this->append($path); } } public function append($path, $offset = 0, $length = 0) { if (is_string($path)) { $path = new PropertyPath($path); } if (0 === $length) { $end = $path->getLength(); } else { $end = $offset + $length; } for (; $offset < $end; ++$offset) { $this->elements[] = $path->getElement($offset); $this->isIndex[] = $path->isIndex($offset); } } public function appendIndex($name) { $this->elements[] = $name; $this->isIndex[] = true; } public function appendProperty($name) { $this->elements[] = $name; $this->isIndex[] = false; } public function remove($offset, $length = 1) { if (!isset($this->elements[$offset])) { throw new OutOfBoundsException(sprintf('The offset %s is not within the property path', $offset)); } $this->resize($offset, $length, 0); } public function replace($offset, $length, $path, $pathOffset = 0, $pathLength = 0) { if (is_string($path)) { $path = new PropertyPath($path); } if ($offset < 0 && abs($offset) <= $this->getLength()) { $offset = $this->getLength() + $offset; } elseif (!isset($this->elements[$offset])) { throw new OutOfBoundsException('The offset '.$offset.' is not within the property path'); } if (0 === $pathLength) { $pathLength = $path->getLength() - $pathOffset; } $this->resize($offset, $length, $pathLength); for ($i = 0; $i < $pathLength; ++$i) { $this->elements[$offset + $i] = $path->getElement($pathOffset + $i); $this->isIndex[$offset + $i] = $path->isIndex($pathOffset + $i); } ksort($this->elements); } public function replaceByIndex($offset, $name = null) { if (!isset($this->elements[$offset])) { throw new OutOfBoundsException(sprintf('The offset %s is not within the property path', $offset)); } if (null !== $name) { $this->elements[$offset] = $name; } $this->isIndex[$offset] = true; } public function replaceByProperty($offset, $name = null) { if (!isset($this->elements[$offset])) { throw new OutOfBoundsException(sprintf('The offset %s is not within the property path', $offset)); } if (null !== $name) { $this->elements[$offset] = $name; } $this->isIndex[$offset] = false; } public function getLength() { return count($this->elements); } public function getPropertyPath() { $pathAsString = $this->__toString(); return '' !== $pathAsString ? new PropertyPath($pathAsString) : null; } public function __toString() { $string = ''; foreach ($this->elements as $offset => $element) { if ($this->isIndex[$offset]) { $element = '['.$element.']'; } elseif ('' !== $string) { $string .= '.'; } $string .= $element; } return $string; } private function resize($offset, $cutLength, $insertionLength) { if ($insertionLength === $cutLength) { return; } $length = count($this->elements); if ($cutLength > $insertionLength) { $diff = $cutLength - $insertionLength; $newLength = $length - $diff; for ($i = $offset; $i < $newLength; ++$i) { $this->elements[$i] = $this->elements[$i + $diff]; $this->isIndex[$i] = $this->isIndex[$i + $diff]; } for (; $i < $length; ++$i) { unset($this->elements[$i], $this->isIndex[$i]); } } else { $diff = $insertionLength - $cutLength; $newLength = $length + $diff; $indexAfterInsertion = $offset + $insertionLength; for ($i = max($length, $indexAfterInsertion); $i < $newLength; ++$i) { $this->elements[$i] = $this->elements[$i - $diff]; $this->isIndex[$i] = $this->isIndex[$i - $diff]; } for ($i = $length - 1; $i >= $indexAfterInsertion; --$i) { $this->elements[$i] = $this->elements[$i - $diff]; $this->isIndex[$i] = $this->isIndex[$i - $diff]; } } } } 
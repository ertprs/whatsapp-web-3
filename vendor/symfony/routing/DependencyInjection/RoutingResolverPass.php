<?php
 namespace Symfony\Component\Routing\DependencyInjection; use Symfony\Component\DependencyInjection\Reference; use Symfony\Component\DependencyInjection\ContainerBuilder; use Symfony\Component\DependencyInjection\Compiler\CompilerPassInterface; class RoutingResolverPass implements CompilerPassInterface { private $resolverServiceId; private $loaderTag; public function __construct($resolverServiceId = 'routing.resolver', $loaderTag = 'routing.loader') { $this->resolverServiceId = $resolverServiceId; $this->loaderTag = $loaderTag; } public function process(ContainerBuilder $container) { if (false === $container->hasDefinition($this->resolverServiceId)) { return; } $definition = $container->getDefinition($this->resolverServiceId); foreach ($container->findTaggedServiceIds($this->loaderTag, true) as $id => $attributes) { $definition->addMethodCall('addLoader', array(new Reference($id))); } } } 
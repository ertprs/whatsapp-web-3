<?php
 namespace Symfony\Component\Security\Csrf\Tests\TokenStorage; use PHPUnit\Framework\TestCase; use Symfony\Component\Security\Csrf\TokenStorage\NativeSessionTokenStorage; class NativeSessionTokenStorageTest extends TestCase { const SESSION_NAMESPACE = 'foobar'; private $storage; public static function setUpBeforeClass() { ini_set('session.save_handler', 'files'); ini_set('session.save_path', sys_get_temp_dir()); parent::setUpBeforeClass(); } protected function setUp() { $_SESSION = array(); $this->storage = new NativeSessionTokenStorage(self::SESSION_NAMESPACE); } public function testStoreTokenInClosedSession() { $this->storage->setToken('token_id', 'TOKEN'); $this->assertSame(array(self::SESSION_NAMESPACE => array('token_id' => 'TOKEN')), $_SESSION); } public function testStoreTokenInClosedSessionWithExistingSessionId() { session_id('foobar'); $this->assertSame(PHP_SESSION_NONE, session_status()); $this->storage->setToken('token_id', 'TOKEN'); $this->assertSame(PHP_SESSION_ACTIVE, session_status()); $this->assertSame(array(self::SESSION_NAMESPACE => array('token_id' => 'TOKEN')), $_SESSION); } public function testStoreTokenInActiveSession() { session_start(); $this->storage->setToken('token_id', 'TOKEN'); $this->assertSame(array(self::SESSION_NAMESPACE => array('token_id' => 'TOKEN')), $_SESSION); } public function testCheckToken() { $this->assertFalse($this->storage->hasToken('token_id')); $this->storage->setToken('token_id', 'TOKEN'); $this->assertTrue($this->storage->hasToken('token_id')); } public function testGetExistingToken() { $this->storage->setToken('token_id', 'TOKEN'); $this->assertSame('TOKEN', $this->storage->getToken('token_id')); } public function testGetNonExistingToken() { $this->storage->getToken('token_id'); } public function testRemoveNonExistingToken() { $this->assertNull($this->storage->removeToken('token_id')); $this->assertFalse($this->storage->hasToken('token_id')); } public function testRemoveExistingToken() { $this->storage->setToken('token_id', 'TOKEN'); $this->assertSame('TOKEN', $this->storage->removeToken('token_id')); $this->assertFalse($this->storage->hasToken('token_id')); } } 
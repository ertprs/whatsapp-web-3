<?php
 namespace Symfony\Component\Security\Http; use Symfony\Component\HttpFoundation\ParameterBag; use Symfony\Component\HttpFoundation\Request; use Symfony\Component\PropertyAccess\Exception\AccessException; use Symfony\Component\PropertyAccess\Exception\InvalidArgumentException; use Symfony\Component\PropertyAccess\PropertyAccess; final class ParameterBagUtils { private static $propertyAccessor; public static function getParameterBagValue(ParameterBag $parameters, $path) { if (false === $pos = strpos($path, '[')) { return $parameters->get($path); } $root = substr($path, 0, $pos); if (null === $value = $parameters->get($root)) { return; } if (null === self::$propertyAccessor) { self::$propertyAccessor = PropertyAccess::createPropertyAccessor(); } try { return self::$propertyAccessor->getValue($value, substr($path, $pos)); } catch (AccessException $e) { return; } } public static function getRequestParameterValue(Request $request, $path) { if (false === $pos = strpos($path, '[')) { return $request->get($path); } $root = substr($path, 0, $pos); if (null === $value = $request->get($root)) { return; } if (null === self::$propertyAccessor) { self::$propertyAccessor = PropertyAccess::createPropertyAccessor(); } try { return self::$propertyAccessor->getValue($value, substr($path, $pos)); } catch (AccessException $e) { return; } } } 